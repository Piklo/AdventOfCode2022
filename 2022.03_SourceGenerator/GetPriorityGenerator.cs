using Microsoft.CodeAnalysis;
using System.Text;

namespace _2022._03_SourceGenerator;

public class GetPriorityGenerator
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            const int lowerCaseAPriority = 1;
            const int upperCaseAPriority = lowerCaseAPriority + 'z' - 'a' + 1;
            var sb = new StringBuilder(@"// <auto-generated/>

namespace _2022._03;

internal static partial class Solution
{
    private static partial int GetPriority(char character)
    {");

            sb.Append(@"
        switch(character)
        {");

            for (var i = 'a'; i <= 'z'; i++)
            {
                sb.Append($@"
            case '{i}': return {i - 'a' + lowerCaseAPriority};");
            }

            for (var i = 'A'; i <= 'Z'; i++)
            {
                sb.Append($@"
            case '{i}': return {i - 'A' + upperCaseAPriority};");
            }

            sb.Append(@"
        }
");


            sb.Append(@"
        throw new Exception($""failed to get priority for {(int)character} '{character}'"");");

            sb.Append(@"
    }
}");

            context.AddSource($"Solution.g.cs", sb.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}
